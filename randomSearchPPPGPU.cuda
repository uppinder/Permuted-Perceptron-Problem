#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <limits.h>

#define M 101 
#define N 117
#define K 22 // Choose K < N.
#define G 30

#define MIN(a,b) (a>b?b:a)
#define MAX(a,b) (a>b?a:b)

void generateData(int A[M][N],int Y[N],int S[M],int H[N+1]);
void matrixMul(int A[M][N],int Y[N],int S[M]);
void displayData(int A[M][N],int Y[N],int S[M],int H[N+1]);

int calculateCost(int S_x[M],int H[N+1]);
int abs(int n);

/*
	Take random e-matrix A(mxn) and a non-negative
	vector S(mx1). Generate random e-vectors Y(nx1).
	Compute the cost function. 

 */

int main(int argc,char* argv[]) {

	int A[M][N],Y[N],S[M],H[N+1];
	
	/*
		Idk if one or 2 kernels are required.
	 */

	/*
		Randomly generate A,Y and S. Compute H.
	 */
	generateData(A,Y,S,H);	

	/*
		Launch kernel ... for calculating A*X for a
		particular block. In total 2^K blocks required.
	 */
	
	// Number of blocks required.
	const int numOfBlocks = 1 << K;
	computeAX<<< numOfBlocks, >>>();

	/*
		Launch kernel ... for computing cost. This includes
		computing S_[] in O(N) and H_[]. And thus calculating
		cost. This is executed for a particular thread.
	 */
	// Number of threads required.
	const int numOfThreads = N - K;
	computeCost<<< numOfBlocks, numOfThreads >>>();

		

	

	return 0;
}

int calculateCost(int S_x[M],int H[N+1]) {

	int i,H_x[N+1];

	//Histogram for S_x
	for(i = 0;i <= N;i++)
		H_x[i] = 0;

	for(i = 0;i < M;i++) {
		if(S_x[i] >= 0)
			H_x[S_x[i]]++;
	}

	//Hamming Distance
	int hamDist = 0;
	for(i = 0;i < M;i++)
		hamDist += abs(S_x[i]) - S_x[i];

	//Histogram variation
	int histVar = 0;
	for(i = 0;i <= N;i++)
		histVar += abs(H[i] - H_x[i]);

	return G*hamDist + histVar;

}

/*
	Generate random A and Y. Compute AY.
	If ith entry of AY is -ve, flip all 
	entries of ith row of A. When all 
	entries of AY are +ve, calculated A,Y,S
	are a data set.
 */
void generateData(int A[M][N],int Y[N],int S[M],int H[N+1]) {

	srand(time(NULL));
	int i,j;

	for(i = 0;i < M;i++)
		for(j = 0;j < N;j++) {

			A[i][j] = (rand()%2 == 0) ? -1:1; 
		}

	for(i = 0;i < N;i++) {
		Y[i] = (rand()%2 == 0) ? -1:1;
	}

	matrixMul(A,Y,S);

	for(i = 0;i < M;i++) {
		if(S[i] < 0) { 
			for(j = 0;j < N;j++) {
				A[i][j] = -A[i][j];
			}
			S[i] = -S[i];
		}
	}

	for(i = 0;i <= N;i++)
		H[i] = 0;

	for(i = 0;i < M;i++)
		H[S[i]]++;

}

void matrixMul(int A[M][N],int Y[N],int S[M]) {

	int i,j,k;

	for(i = 0;i < M;i++)  {
		S[i] = 0;
		for(k = 0;k < N ;k++)
			S[i] += A[i][k] * Y[k];
	}
		
}

void displayData(int A[M][N],int Y[N],int S[M],int H[N+1]) {

	int i,j;

	printf("A:\n");
	for(i = 0;i < M;i++) {
		for(j = 0;j < N ;j++)
			printf("%d  ",A[i][j]);
		printf("\n");
	}

	printf("Y:\n");
	for(i = 0;i < N;i++)
		printf("%d\n",Y[i]);


	printf("S:\n");
	for(i = 0;i < N;i++)
		printf("%d\n",S[i]);
	
	printf("H:\n");
	for(i = 0;i <= N;i++)
		printf("%d\n",H[i]);
	

}

int abs(int n) {
	return (n < 0)? -n:n;
}




